# -------------------------------------------------------------
# Name: Bhavnoor Kaur
# Student ID: 1623727
# CMPUT 274, Fall 2020
#
# Weekly Exercise 2 : Unfair Dice
# -----------------------------------------------------------
import random


def biased_rolls(prob_list, s, n):
    """ Simulate n rolls of a biased m-sided die and return
    a list containing the results.

    Arguments:
        prob_list: a list of the probabilities of rolling the
                   number on each side of the m-sided die. The list
                   will always have the length m (m >= 2), where m is
                   the number of sides numbered 1 to m. Therefore,
                   for example, the probability stored at index 0 in
                   the list is the probability of rolling a 1 on
                   the m-sided die.
        s: the seed to use when initializing the PRNG
        n: the number of rolls to return

    Return:
        rolls: a list (of length n) containing each of the n rolls of the
               biased die, in the order they were generated.
    """
    random.seed(s)
    divisions = []
    div = 0
    # Creating a list 'Divisions' with the upper and lower limits
    # (boundaries) for the specific roll outputs.
    for num in prob_list:
        div = div + float(num)
        divisions.append(div)

    m = len(prob_list)
    # Generating and storing the output for each n rolls in a list

    rolls = []
    # Generating each random number one by one
    for j in range(n):
        r_num = random.random()
        # Resetting the lower limit every time the code generates a
        # new random number between 0 and 1.
        lower = 0
        # Deciding the output of the roll from the generated random
        # number and then storing it in a list
        for i in range(m):
            if r_num >= lower and r_num < float(divisions[i]):
                lower = divisions[i]
                rolls.append(i+1)
    # return the resulting rolls
    return rolls


def draw_histogram(m, rolls, width):
    """ Draws a frequency histogram of the rolls of an m-sided die
    mapped to a fixed width.

    Arguments:
        m (int): the number of sides on the die
        rolls (list): the list of rolls generated by the biased die
        width (int): the fixed width of the histogram, in characters
                     (this is the length of the longest bar in the
                     histogram, to maximize space in the chart)

    Returns:
        None (but prints the histogram to standard output)
    """
    # Count the number of rolls of each side and store them in a list
    roll_count = []
    for i in list(range(1, m+1)):
        count = rolls.count(i)
        roll_count.append(count)

    # Finding the the maximum count from the list
    max_count = max(roll_count)

    print("Frequency Histogram: " + str(m) + "-sided Die")

    # Counting the number of same outputs and then scaling these outputs
    # to the given width
    for j in list(range(1, m+1)):
        count = rolls.count(j)
        scaled_count = round(count*(width/max_count))
        print(str(j)+'.', end='')
        print('#'*scaled_count, end='')
        print('-'*(width-scaled_count))


if __name__ == "__main__":
    # Any code indented under this line will only be run
    # when the program is called directly from the terminal
    # using "python3 unfairDice.py". This can be useful for
    # testing your implementations.
    pass
